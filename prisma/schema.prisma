// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nft {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Int
  royalty      Int
  onSale       Boolean       @default(false)
  imageForNft  ImageForNft[]
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  collection   Collection    @relation(fields: [collectionId], references: [id])
  collectionId Int
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  nftOwner     NftOwner[]
  like         Like[]
  auction      Auction[]
  transaction  Transaction[]
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
}

model NftImage {
  id          String        @id @default(cuid())
  url         String
  imageForNft ImageForNft[]
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @updatedAt
}

model ImageForNft {
  id         String   @id @default(cuid())
  nft        Nft      @relation(fields: [nftId], references: [id])
  nftId      String
  nftImage   NftImage @relation(fields: [nftImageId], references: [id])
  nftImageId String
}

model User {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  email         String         @unique
  password      String?
  bio           String?
  role          Role           @default(USER)
  gender        String?
  currency      String?
  phone         String?
  location      String?
  address       String?
  isActive      Boolean        @default(false)
  validateToken String?        @unique
  tokenExpires  DateTime?
  profileImage  ProfileImage[]
  coverImage    CoverImage[]
  transaction   Transaction[]
  nftOwner      NftOwner[]
  bid           Bid[]
  like          Like[]
  nft           Nft[]
  createdAt     DateTime       @default(now())
  updateAt      DateTime       @updatedAt
}

model ProfileImage {
  id        String   @id @default(cuid())
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model CoverImage {
  id        String   @id @default(cuid())
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Transaction {
  id         String   @id @default(cuid())
  nft        Nft      @relation(fields: [nftId], references: [id])
  nftId      String
  nftOwner   NftOwner @relation(fields: [nftOwnerId], references: [id])
  nftOwnerId String
  buyer      User     @relation(fields: [buyerId], references: [id])
  buyerId    String
  amount     Int
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model NftOwner {
  id             String        @id @default(cuid())
  nft            Nft           @relation(fields: [nftId], references: [id])
  nftId          String
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  auction        Auction[]
  transaction    Transaction[]
  isCurrentOwner Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updateAt       DateTime      @updatedAt
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Auction {
  id         Int      @id @default(autoincrement())
  finishDate DateTime
  minAmount  Int
  nft        Nft      @relation(fields: [nftId], references: [id])
  nftId      String
  nftOwner   NftOwner @relation(fields: [nftOwnerId], references: [id])
  nftOwnerId String
  bid        Bid[]
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  nft       Nft      @relation(fields: [nftId], references: [id])
  nftId     String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  nft       Nft[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Collection {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  nft       Nft[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
