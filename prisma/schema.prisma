// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nft {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Int
  size         Int
  property     String
  onSale       Boolean
  royalty      Int
  nftOwner     NftOwner[]
  image        String?
  transaction  Transaction[]
  like         Like[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  collection   Collection    @relation(fields: [collectionId], references: [id])
  collectionId Int
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  auction      Auction[]
}

model User {
  id        String     @id @default(cuid())
  firstName String
  lastName  String
  email     String
  password  String
  bio       String?
  role      Role       @default(USER)
  gender    String
  currency  String
  phone     String
  location  String
  address   String
  image     String?
  cover     String?
  buyerId   String     @default(cuid())
  sellerId  String     @default(cuid())
  nftOwner  NftOwner[]
  bid       Bid[]
  like      Like[]
  nft       Nft[]
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
}

model Transaction {
  id        String   @id @default(cuid())
  nft       Nft      @relation(fields: [nftId], references: [id])
  nftId     String
  amount    Int
  buyerId   String
  sellerId  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model NftOwner {
  id              String    @id @default(cuid())
  nft             Nft       @relation(fields: [nftId], references: [id])
  nftId           String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  adquisitionDate DateTime  @default(now())
  sellDate        DateTime?
  isCurrentOwner  Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updateAt        DateTime  @updatedAt
  Auction         Auction[]
  isCharged       Boolean   @default(false)
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Auction {
  id         Int      @id @default(autoincrement())
  finishDate DateTime
  minAmount  Int
  nft        Nft      @relation(fields: [nftId], references: [id])
  nftId      String
  nftOwner   NftOwner @relation(fields: [ownerId], references: [id])
  ownerId    String
  status     String
  bid        Bid[]
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  nft       Nft      @relation(fields: [nftId], references: [id])
  nftId     String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  nft       Nft[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Collection {
  id        Int      @id @default(autoincrement())
  name      String
  nft       Nft[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
